{"version":3,"sources":["components/git.png","components/display.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Display","data","repositories","className","class","src","avatar_url","alt","width","href","html_url","name","bio","blog","location","followers_url","followers","following_url","following","public_repos","map","repo","target","logo","stargazers_url","stargazers_count","description","Profile","useState","setData","username","setUsername","setRepositories","submitHandler","e","a","preventDefault","fetch","profile","json","profileJson","console","log","repos_url","repoJson","type","placeholder","aria-label","value","onChange","onClick","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e36e8b8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/git.5f529617.png\";","import React from \"react\";\nimport \"./display.css\";\nimport logo from \"./git.png\";\n\nconst Display = ({ data, repositories }) => {\n  return (\n    <div className=\"profile\">\n      <div class=\"container\">\n        <div class=\"row text-center\">\n          <div class=\"col-xl-3 col-sm-6 mb-5\">\n            <div class=\"bg-white rounded shadow-sm py-5 px-4\">\n              <img\n                src={data.avatar_url}\n                alt=\"\"\n                width=\"100\"\n                class=\"img-fluid rounded-circle mb-3 img-thumbnail shadow-sm\"\n              />\n              <p>\n                <a href={data.html_url}>\n                  <h5 class=\"mb-0 name\">{data.name}</h5>\n                </a>\n              </p>\n              <p class=\"small text-uppercase text-muted bio\">{data.bio}</p>\n              <a className=\"blog\" href=\"{data.blog}\">\n                {data.blog}\n              </a>\n              <p className=\"location\">{data.location}</p>\n              <div className=\"row \">\n                <div className=\"col\">\n                  <a href={data.followers_url} className=\"foll\">\n                    Follwers: {data.followers}\n                  </a>\n                </div>\n                <div className=\"col\">\n                  <a href={data.following_url} className=\"foll\">\n                    Follwing: {data.following}\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\" col text-left bg-white rounded shadow-sm\">\n            <p className=\"m-2\">Total repositories: {data.public_repos}</p>\n            {repositories.map((repo) => (\n              <div className=\"repos\" key={repo.stargazers_count}>\n                <ul class=\"list-group list-group-flush\">\n                  <li class=\"list-group-item m-10\">\n                    <a href={repo.html_url} className=\"header\" target=\"_blank\">\n                      <i>\n                        <img src={logo} class=\"icon\" />\n                      </i>\n                      {repo.name}\n                    </a>\n\n                    <img\n                      src=\"https://i.pinimg.com/originals/f4/f3/ba/f4f3ba94175a02c9e5a016dbaa8ae21f.png\"\n                      class=\"icon\"\n                    />\n                    <a href={repo.stargazers_url}>{repo.stargazers_count}</a>\n\n                    <p>{repo.description}</p>\n                  </li>\n                </ul>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Display;\n","import React, { useState } from \"react\";\nimport Display from \"./display\";\nimport \"./profile.css\";\n// import header from \"./Github-Logo.png\";\n\nconst Profile = () => {\n  const [data, setData] = useState({});\n  const [username, setUsername] = useState(\"\");\n  const [repositories, setRepositories] = useState([]);\n\n  const onChangeHandler = (e) => {\n    setUsername(e.target.value);\n  };\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n\n    const profile = await fetch(`https://api.github.com/users/${username}`);\n\n    const profileJson = await profile.json();\n    console.log(profileJson);\n\n    const repositories = await fetch(profileJson.repos_url);\n    const repoJson = await repositories.json();\n    console.log(repoJson);\n\n    if (profileJson) {\n      setData(profileJson);\n      setRepositories(repoJson);\n    }\n  };\n  return (\n    <>\n      <div>\n        <div>\n          <nav className=\"navbar navbar-light \">\n            <div className=\"container-fluid row\">\n              <div className=\"col-3\">\n                <img\n                  src=\"https://github.githubassets.com/images/modules/logos_page/Octocat.png\"\n                  className=\"logo\"\n                  alt=\"logo\"\n                />\n              </div>\n\n              <div className=\"col-9 text-left\">\n                <h1 className=\"display-4\">Github Viewer</h1>\n                <p className=\"lead mb-0\">\n                  Enter the github username to get insights on profile and\n                  repositeries of the user.\n                </p>\n              </div>\n            </div>\n          </nav>\n          <div className=\"container py-5\">\n            <div className=\"row text-center text-white\">\n              <div className=\"col-lg-8 mx-auto\">\n                <form className=\"d-flex\">\n                  <input\n                    className=\" m-2 size\"\n                    type=\"search\"\n                    placeholder=\"Type username\"\n                    aria-label=\"Search\"\n                    value={username}\n                    onChange={onChangeHandler}\n                  />\n                  <button\n                    className=\"btn btn-primary m-2\"\n                    type=\"submit\"\n                    onClick={submitHandler}\n                  >\n                    Search\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n\n          <Display data={data} repositories={repositories} />\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Profile;\n","import React from \"react\";\nimport \"./App.css\";\nimport Profile from \"./components/Profile\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <header className=\"header text-center\">\n        <Profile />\n      </header>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}